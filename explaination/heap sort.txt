Here's a **line-by-line explanation** of the **Heap Sort** program in C++:

---

### ðŸ”½ Include & Namespace

```cpp
#include <iostream>
using namespace std;
```

* Includes the input-output library and uses the standard namespace.

---

### ðŸ”½ `heapify()` Function

```cpp
void heapify(int arr[], int n, int i)
```

* Ensures the **subtree rooted at index `i`** satisfies the **Max Heap** property.
* Parameters:

  * `arr[]` is the array.
  * `n` is the size of the heap.
  * `i` is the index of the root node of the subtree.

```cpp
    int largest = i;         
    int left = 2 * i + 1;    
    int right = 2 * i + 2;
```

* Finds left and right children of node `i`.

```cpp
    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;
```

* Compares the root with its left and right children, updates `largest` accordingly.

```cpp
    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
```

* If the largest is not the current node, it swaps and recursively calls `heapify()`.

---

### ðŸ”½ `heapSort()` Function

```cpp
void heapSort(int arr[], int n)
```

* Sorts the array using **Heap Sort** algorithm.

```cpp
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
```

* Builds the **Max Heap** from bottom-up, starting from last non-leaf node.

```cpp
    for (int i = n - 1; i >= 0; i--) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
```

* Repeatedly:

  * Swaps the max (root) with the last element.
  * Reduces heap size.
  * Restores the Max Heap by calling `heapify()`.

---

### ðŸ”½ `printArray()` Function

```cpp
void printArray(int arr[], int n)
```

* Prints the sorted array.

---

### ðŸ”½ `main()` Function

```cpp
int main() {
    int arr[100], n;
```

* Declares an array of max size 100 and `n` for number of elements.

```cpp
    cout << "Enter number of elements: ";
    cin >> n;

    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++)
        cin >> arr[i];
```

* Takes user input for array size and elements.

```cpp
    heapSort(arr, n);
    printArray(arr, n);
```

* Calls heap sort and prints the sorted result.

---

### âœ… Sample Input/Output

**Input:**

```
Enter number of elements: 5
Enter 5 elements:
4 10 3 5 1
```

**Output:**

```
Sorted array:
1 3 4 5 10
```

Would you like a diagram of the heap steps or a visual explanation?
