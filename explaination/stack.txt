Here’s a **line-by-line explanation** of the given C++ program that handles **infix to postfix/prefix conversion** and **evaluation** using **stack implemented via linked list**:

---

### **HEADER FILES**

```cpp
#include <iostream>      // for input/output
#include <cstring>       // for string handling functions (though not used directly here)
#include <cctype>        // for functions like isdigit, isalnum
#include <cmath>         // for math functions like pow
#include <stdexcept>     // for exception handling (used in peek)
#include <algorithm>     // for reverse()
using namespace std;
```

---

### **STACK IMPLEMENTATION USING LINKED LIST**

#### **Node class for stack**

```cpp
template <typename T>
class StackNode {
public:
    T data;
    StackNode* next;
    StackNode(T val) : data(val), next(NULL) {}
};
```

* A template-based node that stores data of any type (`T`) and a pointer to the next node.

---

#### **Stack class (ADT)**

```cpp
template <typename T>
class Stack {
private:
    StackNode<T>* top;
```

* `top` keeps track of the top element.

```cpp
public:
    Stack() : top(NULL) {}
```

* Constructor initializes an empty stack.

```cpp
    void push(T val) {
        StackNode<T>* newNode = new StackNode<T>(val);
        newNode->next = top;
        top = newNode;
    }
```

* Adds a new element at the top.

```cpp
    void pop() {
        if (isEmpty()) return;
        StackNode<T>* temp = top;
        top = top->next;
        delete temp;
    }
```

* Removes top element safely.

```cpp
    T peek() {
        if (!isEmpty()) return top->data;
        throw runtime_error("Stack is empty");
    }
```

* Returns top element without removing it.

```cpp
    bool isEmpty() {
        return top == NULL;
    }
};
```

* Checks if the stack is empty.

---

### **UTILITY FUNCTIONS**

#### **Operator precedence**

```cpp
int precedence(char op) {
    if (op == '^') return 3;
    else if (op == '*' || op == '/') return 2;
    else if (op == '+' || op == '-') return 1;
    else return -1;
}
```

#### **Check if character is an operator**

```cpp
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}
```

---

### **INFIX TO POSTFIX CONVERSION**

```cpp
string infixToPostfix(string infix) {
    Stack<char> st;
    string postfix;
```

* Uses a stack for operators and builds a postfix string.

```cpp
    for (int i = 0; i < infix.length(); i++) {
        char c = infix[i];

        if (c == ' ') continue;

        if (isalnum(c)) {
            postfix += c;
```

* If operand, add to output.

```cpp
        } else if (c == '(') {
            st.push(c);
        } else if (c == ')') {
            while (!st.isEmpty() && st.peek() != '(') {
                postfix += st.peek();
                st.pop();
            }
            st.pop(); // pop '('
```

* Handle brackets properly.

```cpp
        } else if (isOperator(c)) {
            while (!st.isEmpty() && precedence(c) <= precedence(st.peek())) {
                postfix += st.peek();
                st.pop();
            }
            st.push(c);
        }
    }
```

* Handles operators by comparing precedence and popping as needed.

```cpp
    while (!st.isEmpty()) {
        postfix += st.peek();
        st.pop();
    }

    return postfix;
}
```

* Empty remaining stack to output.

---

### **INFIX TO PREFIX CONVERSION**

```cpp
string reverseAndSwap(string exp) {
    reverse(exp.begin(), exp.end());
    for (int i = 0; i < exp.length(); i++) {
        if (exp[i] == '(')
            exp[i] = ')';
        else if (exp[i] == ')')
            exp[i] = '(';
    }
    return exp;
}
```

* Reverses infix and swaps brackets to help in prefix conversion.

```cpp
string infixToPrefix(string infix) {
    string rev = reverseAndSwap(infix);
    string postfix = infixToPostfix(rev);
    reverse(postfix.begin(), postfix.end());
    return postfix;
}
```

* Uses reversed and swapped infix, converts to postfix, then reverses to get prefix.

---

### **POSTFIX EVALUATION**

```cpp
int evaluatePostfix(string postfix) {
    Stack<int> st;
    for (int i = 0; i < postfix.length(); i++) {
        char c = postfix[i];
        if (isdigit(c)) {
            st.push(c - '0');
```

* If digit, push value.

```cpp
        } else if (isOperator(c)) {
            int b = st.peek(); st.pop();
            int a = st.peek(); st.pop();
            switch (c) {
                case '+': st.push(a + b); break;
                case '-': st.push(a - b); break;
                case '*': st.push(a * b); break;
                case '/': st.push(a / b); break;
                case '^': st.push(pow(a, b)); break;
            }
        }
    }
    return st.peek();
}
```

* Applies operator on top 2 operands and pushes result back.

---

### **PREFIX EVALUATION**

```cpp
int evaluatePrefix(string prefix) {
    Stack<int> st;
    for (int i = prefix.length() - 1; i >= 0; i--) {
        char c = prefix[i];
        if (isdigit(c)) {
            st.push(c - '0');
        } else if (isOperator(c)) {
            int a = st.peek(); st.pop();
            int b = st.peek(); st.pop();
            switch (c) {
                case '+': st.push(a + b); break;
                case '-': st.push(a - b); break;
                case '*': st.push(a * b); break;
                case '/': st.push(a / b); break;
                case '^': st.push(pow(a, b)); break;
            }
        }
    }
    return st.peek();
}
```

* Similar to postfix, but processed right-to-left.

---

### **MAIN FUNCTION**

```cpp
int main() {
    string infix;
    cout << "Enter infix expression (single-digit operands, no spaces): ";
    cin >> infix;
```

* Takes infix input (e.g., `2+3*4`)

```cpp
    string postfix = infixToPostfix(infix);
    string prefix = infixToPrefix(infix);
```

```cpp
    cout << "Postfix: " << postfix << endl;
    cout << "Prefix: " << prefix << endl;
```

```cpp
    cout << "Postfix Evaluation: " << evaluatePostfix(postfix) << endl;
    cout << "Prefix Evaluation: " << evaluatePrefix(prefix) << endl;
```

```cpp
    return 0;
}
```

* Displays postfix and prefix forms and their evaluated results.

---

### ✅ Example Input/Output:

```
Enter infix expression (single-digit operands, no spaces): 2+3*4
Postfix: 234*+
Prefix: +2*34
Postfix Evaluation: 14
Prefix Evaluation: 14
```

---

Would you like me to add multi-digit operand support or parenthesis handling improvements?
